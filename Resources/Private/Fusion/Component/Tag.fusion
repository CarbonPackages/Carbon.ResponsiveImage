prototype(Carbon.ResponsiveImage:Tag) < prototype(Neos.Fusion:Component) {
    // Use with https://www.npmjs.com/package/lazysizes

    asset = null
    assetLightbox = ${this.asset}

    renderInBackend = ${node.context.inBackend}
    renderLinks = ${node.context.live}
    responsive = ${node.context.live}
    lazy = ${node.context.live}

    maximumWidth = ${Configuration.setting('Carbon.ResponsiveImage.maximumWidth')}
    width = null
    height = null
    preset = null

    alternativeText = null
    title = null
    id = null
    caption = null
    lightbox = null
    link = null

    style = null
    class = null
    classLink = ${this.class}
    classLightbox = ${this.class}
    configLightbox = ${Configuration.setting('Carbon.ResponsiveImage.lightbox')}

    lazyClass = ${Configuration.setting('Carbon.ResponsiveImage.class')}
    lazyWidth = ${Configuration.setting('Carbon.ResponsiveImage.placeholderWidth')}
    sizes = ${Configuration.setting('Carbon.ResponsiveImage.sizesPresets')}
    placeholderWidth = ${Configuration.setting('Carbon.ResponsiveImage.placeholderWidth')}
    maximumScreenDensity = ${Configuration.setting('Carbon.ResponsiveImage.maximumScreenDensity')}
    loader = ${Configuration.setting('Carbon.ResponsiveImage.loader.tag')}

    dummy = Neos.Fusion:DataStructure {
        default = ${Configuration.setting('Carbon.ResponsiveImage.dummy')}
        baseWidth = ${this.default.baseWidth}
        baseHeight = ${this.default.baseHeight}
        backgroundColor = ${this.default.backgroundColor}
        foregroundColor = ${this.default.foregroundColor}
        text = null
    }

    @if {
        hasImageOrBackend = ${this.renderInBackend || this.asset}
        needSize = ${this.width || this.maximumWidth}
    }

    // Internal
    ratio = ${this.width && this.height ? this.width / this.height : null}

    renderer = Neos.Fusion:Component {
        @apply.props = ${props}

        hasLink = afx`<Carbon.Link:Valid link={props.link} />`
        image = afx`<Carbon.ResponsiveImage:Internal.ImageSource {...props} />`
        srcset = afx`<Carbon.ResponsiveImage:Internal.SrcSet {...props} />`
        
        // lazyWidth doesn't work correctly 		
        // https://github.com/sitegeist/Sitegeist.Lazybones/issues/1		
        lazySrc = ${String.replace(this.image.srcset(props.lazyWidth + 'w'), ' ' + props.lazyWidth + 'w', '')}		
        lazySrc.@if.set = ${props.lazyWidth && this.image}

        renderer = afx`
            <Neos.Fusion:Augmenter
                id={props.id}
                style={props.style}
                width={props.width}
                height={props.height}
                data-aspectratio={props.ratio}
                src={props.lazySrc}
            >
                <Sitegeist.Lazybones:Image
                    lazy={props.lazy}
                    lazyWidth={props.lazyWidth}
                    lazyClass={props.lazyClass}
                    sizes='auto'
                    alt={props.alternativeText}
                    title={props.title}
                    class={props.class}
                    imageSource={props.image}
                    srcset={props.asset && props.responsive ? props.srcset : '1x, 2x'} />
            </Neos.Fusion:Augmenter>
        `
        renderer.@process {
            loader = afx`<Carbon.ResponsiveImage:Wrapper.Loader loader={props.loader} />`
            link = afx`<Carbon.ResponsiveImage:Wrapper.Link @if.render={props.hasLink && props.renderLinks} {...props} class={props.classLink} />`
            lightbox = afx`<Carbon.ResponsiveImage:Wrapper.Lightbox @if.render={!props.hasLink && props.lightbox && props.renderLinks} asset={props.assetLightbox} caption={props.caption} class={props.classLightbox} config={props.configLightbox} />`
        }
    }
}
