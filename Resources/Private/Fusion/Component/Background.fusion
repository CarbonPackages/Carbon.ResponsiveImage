prototype(Carbon.ResponsiveImage:Background) < prototype(Neos.Fusion:Component) {
    // Use with https://www.npmjs.com/package/lazysizes

    tagName = 'div'

    asset = null
    assetLightbox = ${this.asset}

    renderInBackend = ${node.context.inBackend}
    renderLinks = ${node.context.live}
    responsive = ${node.context.live}
    lazy = true

    maximumWidth = ${Configuration.setting('Carbon.ResponsiveImage.maximumWidth')}
    width = null
    height = null
    preset = null

    title = null
    id = null
    caption = null
    lightbox = null
    link = null

    content = null

    style = null
    class = null
    classLink = ${this.class}
    classLightbox = ${this.class}
    configLightbox = ${Configuration.setting('Carbon.ResponsiveImage.lightbox')}

    lazyClass = ${Configuration.setting('Carbon.ResponsiveImage.class')}
    lazyWidth = ${Configuration.setting('Carbon.ResponsiveImage.placeholderWidth')}
    sizes = ${Configuration.setting('Carbon.ResponsiveImage.sizesPresets')}
    placeholderWidth = ${Configuration.setting('Carbon.ResponsiveImage.placeholderWidth')}
    maximumScreenDensity = ${Configuration.setting('Carbon.ResponsiveImage.maximumScreenDensity')}
    loader = ${Configuration.setting('Carbon.ResponsiveImage.loader.background')}

    dummy = Neos.Fusion:DataStructure {
        default = ${Configuration.setting('Carbon.ResponsiveImage.dummy')}
        baseWidth = ${this.default.baseWidth}
        baseHeight = ${this.default.baseHeight}
        backgroundColor = ${this.default.backgroundColor}
        foregroundColor = ${this.default.foregroundColor}
        text = null
    }

    @if {
        hasImageOrBackend = ${this.renderInBackend || this.asset}
        needSize = ${this.width || this.maximumWidth}
    }

    // Internal
    ratio = ${this.width && this.height ? this.width / this.height : null}

    renderer = Neos.Fusion:Component {
        @apply.props = ${props}

        hasLink = afx`<Carbon.Link:Valid link={props.link} />`
        image = afx`<Carbon.ResponsiveImage:Internal.ImageSource {...props} />`
        srcset = afx`<Carbon.ResponsiveImage:Internal.SrcSet {...props} />`
        spacer = afx`<Carbon.ResponsiveImage:Internal.Spacer {...props} />`
        needAnchor = ${props.renderLinks && (this.hasLink || props.lightbox)}

        renderer = Neos.Fusion:Augmenter {
            id = ${props.id}
            class = ${Type.isArray(props.class) ? Array.join(props.class, ' ') : props.class}
            class.@process.addLazyClass = ${String.trim(value + ' ' + props.lazyClass)}
            title = ${props.needAnchor ? props.title : null}
            style = ${props.style}
            data-sizes = 'auto'
            data-bgset = ${props.image.srcset(props.srcset)}
            data-aspectratio = ${props.ratio}

            content = Neos.Fusion:Tag {
                tagName = ${props.needAnchor ? 'a' : props.tagName}
                content = ${(props.content || props.spacer || '') + props.loader}
                attributes = Neos.Fusion:Case {
                    hasLink {
                        condition = ${props.hasLink}
                        renderer = Carbon.Link:Attributes {
                            link = ${props.link}
                            additionalClass = ${props.classLink}
                        }
                    }
                    hasLightbox {
                        condition = ${props.lightbox && props.renderLinks}
                        renderer = Carbon.ResponsiveImage:Attributes.Lightbox {
                            asset = ${props.assetLightbox}
                            caption = ${props.caption}
                            class = ${props.classLightbox} 
                            config = ${props.configLightbox}
                        }
                    }
                }
            }
        }
    }
}
