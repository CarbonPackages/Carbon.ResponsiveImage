prototype(Carbon.ResponsiveImage:Internal.ImageSource) < prototype(Neos.Fusion:Component) {
    asset = null
    preset = null
    width = null
    height = null

    dummy = Neos.Fusion:DataStructure {
        default = ${Configuration.setting('Carbon.ResponsiveImage.dummy')}
        baseWidth = ${this.default.baseWidth}
        baseHeight = ${this.default.baseHeight}
        backgroundColor = ${this.default.backgroundColor}
        foregroundColor = ${this.default.foregroundColor}
        text = null
    }

    // Internal
    maximumWidth = ${Configuration.setting('Carbon.ResponsiveImage.maximumWidth')}
    dummyMaxSizeText = ${this.width ? Translation.translate('width', '{0} pixels wide', [this.width], null, 'Carbon.ResponsiveImage') : Translation.translate('maximumWidth', 'Maximal {0} pixels wide', [this.maximumWidth], null, 'Carbon.ResponsiveImage')}

    resolvedWidth = ${Type.isNumeric(this.width) ? String.toInteger(this.width) : Type.isNumeric(this.height) ? null : String.toInteger(this.maximumWidth)}
    resolvedHeight = ${Type.isNumeric(this.height) ? String.toInteger(this.height) : null}

    renderer = Neos.Fusion:Case {
        hasAsset {
            condition = ${props.asset}
            renderer = afx`
                <Sitegeist.Kaleidoscope:AssetImageSource
                    asset={props.asset}
                    preset={props.preset}
                    width={props.resolvedWidth}
                    height={props.resolvedHeight}
                />
            `
        }
        dummyImage {
            condition = true
            renderer = afx`
                <Sitegeist.Kaleidoscope:DummyImageSource
                    {...props.dummy}
                    text={props.dummy.text ? props.dummy.text : props.width && props.height ? null : props.dummyMaxSizeText}
                    preset={props.preset}
                    width={props.resolvedWidth}
                    height={props.resolvedHeight}
                />
            `
        }
    }
}
